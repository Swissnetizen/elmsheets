Elm.Parse = Elm.Parse || {};
Elm.Parse.make = function (_elm) {
   "use strict";
   _elm.Parse = _elm.Parse || {};
   if (_elm.Parse.values)
   return _elm.Parse.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Parse",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Regex = Elm.Regex.make(_elm),
   $Result = Elm.Result.make(_elm),
   $String = Elm.String.make(_elm),
   $Util = Elm.Util.make(_elm);
   var convertCellName = function (viewForm) {
      return function () {
         var split = $Util.unsafeMaybe("convert cell name split")($String.uncons($String.toUpper(viewForm)));
         var predx = F2(function (e,n) {
            return !_U.eq(e,
            $Basics.fst(split)) && _U.eq($Basics.snd(n),
            false) ? {ctor: "_Tuple2"
                     ,_0: $Basics.fst(n) + 1
                     ,_1: false} : {ctor: "_Tuple2"
                                   ,_0: $Basics.fst(n)
                                   ,_1: true};
         });
         var x = $Basics.fst(A2($List.foldl,
         predx,
         {ctor: "_Tuple2"
         ,_0: 0
         ,_1: false})($Util.alphabet));
         var y = function (n) {
            return n - 1;
         }($Util.unsafeMaybe("convert cell y")($Result.toMaybe($String.toInt($Basics.snd(split)))));
         return A2($Cell.id,x,y);
      }();
   };
   var coordRegex = $Regex.regex("([A-Z][1-9]{1,3})");
   var computeForumla = F2(function (f,
   getCell) {
      return function () {
         var refs = $List.map(convertCellName)($List.map(function (_) {
            return _.match;
         })(A2($Regex.find,
         $Regex.All,
         coordRegex)(f)));
         var processMaybe = function (may) {
            return function () {
               switch (may.ctor)
               {case "Just":
                  return may._0.data;
                  case "Nothing": return "errol";}
               _U.badCase($moduleName,
               "between lines 45 and 51");
            }();
         };
         var pred = function (c) {
            return processMaybe(getCell(convertCellName(function (_) {
               return _.match;
            }(c))));
         };
         return {ctor: "_Tuple2"
                ,_0: A4($Regex.replace,
                $Regex.All,
                coordRegex,
                pred,
                f)
                ,_1: refs};
      }();
   });
   var computeContent = F2(function (content,
   getCell) {
      return function () {
         var h = A3($String.slice,
         0,
         1,
         content);
         return _U.eq(h,
         "=") ? A2(computeForumla,
         content,
         getCell) : {ctor: "_Tuple2"
                    ,_0: content
                    ,_1: _L.fromArray([])};
      }();
   });
   _elm.Parse.values = {_op: _op
                       ,computeContent: computeContent
                       ,coordRegex: coordRegex
                       ,computeForumla: computeForumla
                       ,convertCellName: convertCellName};
   return _elm.Parse.values;
};