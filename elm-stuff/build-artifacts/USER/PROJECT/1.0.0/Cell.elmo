Elm.Cell = Elm.Cell || {};
Elm.Cell.make = function (_elm) {
   "use strict";
   _elm.Cell = _elm.Cell || {};
   if (_elm.Cell.values)
   return _elm.Cell.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Cell",
   $Basics = Elm.Basics.make(_elm),
   $String = Elm.String.make(_elm),
   $Util = Elm.Util.make(_elm);
   var id = F2(function (x,y) {
      return function () {
         var xView = $Util.selectFromAlphabet(x);
         var convertNo = function (n) {
            return $Basics.fst($Util.unsafeMaybe("id.convertNo")($String.uncons($Basics.toString(n))));
         };
         var yView = convertNo(y);
         return {_: {}
                ,view: A2($Basics._op["++"],
                $Basics.toString(xView),
                $Basics.toString(yView))
                ,x: x
                ,xView: xView
                ,y: y
                ,yView: yView};
      }();
   });
   var makeEmpty = F2(function (y,
   x) {
      return {_: {}
             ,content: ""
             ,data: ""
             ,editMode: false
             ,id: A2(id,x,y)
             ,refedBy: _L.fromArray([])
             ,refs: _L.fromArray([])};
   });
   var Id = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,view: a
             ,x: b
             ,xView: d
             ,y: c
             ,yView: e};
   });
   var Model = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,content: b
             ,data: c
             ,editMode: d
             ,id: a
             ,refedBy: f
             ,refs: e};
   });
   _elm.Cell.values = {_op: _op
                      ,Model: Model
                      ,Id: Id
                      ,id: id
                      ,makeEmpty: makeEmpty};
   return _elm.Cell.values;
};